// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: acs5.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Standards.ACS5 {

  /// <summary>Holder for reflection information generated from acs5.proto</summary>
  internal static partial class Acs5Reflection {

    #region Descriptor
    /// <summary>File descriptor for acs5.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Acs5Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgphY3M1LnByb3RvEgRhY3M1GhJhZWxmL29wdGlvbnMucHJvdG8aG2dvb2ds",
            "ZS9wcm90b2J1Zi9lbXB0eS5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBw",
            "ZXJzLnByb3RvItMBChZNZXRob2RDYWxsaW5nVGhyZXNob2xkEkoKEHN5bWJv",
            "bF90b19hbW91bnQYASADKAsyMC5hY3M1Lk1ldGhvZENhbGxpbmdUaHJlc2hv",
            "bGQuU3ltYm9sVG9BbW91bnRFbnRyeRI2ChR0aHJlc2hvbGRfY2hlY2tfdHlw",
            "ZRgCIAEoDjIYLmFjczUuVGhyZXNob2xkQ2hlY2tUeXBlGjUKE1N5bWJvbFRv",
            "QW1vdW50RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgDOgI4ASLz",
            "AQoeU2V0TWV0aG9kQ2FsbGluZ1RocmVzaG9sZElucHV0Eg4KBm1ldGhvZBgB",
            "IAEoCRJSChBzeW1ib2xfdG9fYW1vdW50GAIgAygLMjguYWNzNS5TZXRNZXRo",
            "b2RDYWxsaW5nVGhyZXNob2xkSW5wdXQuU3ltYm9sVG9BbW91bnRFbnRyeRI2",
            "ChR0aHJlc2hvbGRfY2hlY2tfdHlwZRgDIAEoDjIYLmFjczUuVGhyZXNob2xk",
            "Q2hlY2tUeXBlGjUKE1N5bWJvbFRvQW1vdW50RW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgDOgI4ASowChJUaHJlc2hvbGRDaGVja1R5cGUSCwoH",
            "QkFMQU5DRRAAEg0KCUFMTE9XQU5DRRABMtcBChhUaHJlc2hvbGRTZXR0aW5n",
            "Q29udHJhY3QSWwoZU2V0TWV0aG9kQ2FsbGluZ1RocmVzaG9sZBIkLmFjczUu",
            "U2V0TWV0aG9kQ2FsbGluZ1RocmVzaG9sZElucHV0GhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASXgoZR2V0TWV0aG9kQ2FsbGluZ1RocmVzaG9sZBIcLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRocLmFjczUuTWV0aG9kQ2FsbGlu",
            "Z1RocmVzaG9sZCIFiIn3AQFCH6oCE0FFbGYuU3RhbmRhcmRzLkFDUzWKkvQB",
            "BGFjczViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AElf.Standards.ACS5.ThresholdCheckType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Standards.ACS5.MethodCallingThreshold), global::AElf.Standards.ACS5.MethodCallingThreshold.Parser, new[]{ "SymbolToAmount", "ThresholdCheckType" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Standards.ACS5.SetMethodCallingThresholdInput), global::AElf.Standards.ACS5.SetMethodCallingThresholdInput.Parser, new[]{ "Method", "SymbolToAmount", "ThresholdCheckType" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  internal enum ThresholdCheckType {
    [pbr::OriginalName("BALANCE")] Balance = 0,
    [pbr::OriginalName("ALLOWANCE")] Allowance = 1,
  }

  #endregion

  #region Messages
  internal sealed partial class MethodCallingThreshold : pb::IMessage<MethodCallingThreshold> {
    private static readonly pb::MessageParser<MethodCallingThreshold> _parser = new pb::MessageParser<MethodCallingThreshold>(() => new MethodCallingThreshold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MethodCallingThreshold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Standards.ACS5.Acs5Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodCallingThreshold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodCallingThreshold(MethodCallingThreshold other) : this() {
      symbolToAmount_ = other.symbolToAmount_.Clone();
      thresholdCheckType_ = other.thresholdCheckType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MethodCallingThreshold Clone() {
      return new MethodCallingThreshold(this);
    }

    /// <summary>Field number for the "symbol_to_amount" field.</summary>
    public const int SymbolToAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_symbolToAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> symbolToAmount_ = new pbc::MapField<string, long>();
    /// <summary>
    /// The order matters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> SymbolToAmount {
      get { return symbolToAmount_; }
    }

    /// <summary>Field number for the "threshold_check_type" field.</summary>
    public const int ThresholdCheckTypeFieldNumber = 2;
    private global::AElf.Standards.ACS5.ThresholdCheckType thresholdCheckType_ = global::AElf.Standards.ACS5.ThresholdCheckType.Balance;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Standards.ACS5.ThresholdCheckType ThresholdCheckType {
      get { return thresholdCheckType_; }
      set {
        thresholdCheckType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MethodCallingThreshold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MethodCallingThreshold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!SymbolToAmount.Equals(other.SymbolToAmount)) return false;
      if (ThresholdCheckType != other.ThresholdCheckType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= SymbolToAmount.GetHashCode();
      if (ThresholdCheckType != global::AElf.Standards.ACS5.ThresholdCheckType.Balance) hash ^= ThresholdCheckType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      symbolToAmount_.WriteTo(output, _map_symbolToAmount_codec);
      if (ThresholdCheckType != global::AElf.Standards.ACS5.ThresholdCheckType.Balance) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ThresholdCheckType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += symbolToAmount_.CalculateSize(_map_symbolToAmount_codec);
      if (ThresholdCheckType != global::AElf.Standards.ACS5.ThresholdCheckType.Balance) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ThresholdCheckType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MethodCallingThreshold other) {
      if (other == null) {
        return;
      }
      symbolToAmount_.Add(other.symbolToAmount_);
      if (other.ThresholdCheckType != global::AElf.Standards.ACS5.ThresholdCheckType.Balance) {
        ThresholdCheckType = other.ThresholdCheckType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbolToAmount_.AddEntriesFrom(input, _map_symbolToAmount_codec);
            break;
          }
          case 16: {
            ThresholdCheckType = (global::AElf.Standards.ACS5.ThresholdCheckType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SetMethodCallingThresholdInput : pb::IMessage<SetMethodCallingThresholdInput> {
    private static readonly pb::MessageParser<SetMethodCallingThresholdInput> _parser = new pb::MessageParser<SetMethodCallingThresholdInput>(() => new SetMethodCallingThresholdInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMethodCallingThresholdInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Standards.ACS5.Acs5Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMethodCallingThresholdInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMethodCallingThresholdInput(SetMethodCallingThresholdInput other) : this() {
      method_ = other.method_;
      symbolToAmount_ = other.symbolToAmount_.Clone();
      thresholdCheckType_ = other.thresholdCheckType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMethodCallingThresholdInput Clone() {
      return new SetMethodCallingThresholdInput(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_to_amount" field.</summary>
    public const int SymbolToAmountFieldNumber = 2;
    private static readonly pbc::MapField<string, long>.Codec _map_symbolToAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 18);
    private readonly pbc::MapField<string, long> symbolToAmount_ = new pbc::MapField<string, long>();
    /// <summary>
    /// The order matters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> SymbolToAmount {
      get { return symbolToAmount_; }
    }

    /// <summary>Field number for the "threshold_check_type" field.</summary>
    public const int ThresholdCheckTypeFieldNumber = 3;
    private global::AElf.Standards.ACS5.ThresholdCheckType thresholdCheckType_ = global::AElf.Standards.ACS5.ThresholdCheckType.Balance;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Standards.ACS5.ThresholdCheckType ThresholdCheckType {
      get { return thresholdCheckType_; }
      set {
        thresholdCheckType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMethodCallingThresholdInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMethodCallingThresholdInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (!SymbolToAmount.Equals(other.SymbolToAmount)) return false;
      if (ThresholdCheckType != other.ThresholdCheckType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      hash ^= SymbolToAmount.GetHashCode();
      if (ThresholdCheckType != global::AElf.Standards.ACS5.ThresholdCheckType.Balance) hash ^= ThresholdCheckType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      symbolToAmount_.WriteTo(output, _map_symbolToAmount_codec);
      if (ThresholdCheckType != global::AElf.Standards.ACS5.ThresholdCheckType.Balance) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ThresholdCheckType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      size += symbolToAmount_.CalculateSize(_map_symbolToAmount_codec);
      if (ThresholdCheckType != global::AElf.Standards.ACS5.ThresholdCheckType.Balance) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ThresholdCheckType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMethodCallingThresholdInput other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      symbolToAmount_.Add(other.symbolToAmount_);
      if (other.ThresholdCheckType != global::AElf.Standards.ACS5.ThresholdCheckType.Balance) {
        ThresholdCheckType = other.ThresholdCheckType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 18: {
            symbolToAmount_.AddEntriesFrom(input, _map_symbolToAmount_codec);
            break;
          }
          case 24: {
            ThresholdCheckType = (global::AElf.Standards.ACS5.ThresholdCheckType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
