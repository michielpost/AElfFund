// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: token_converter_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.TokenConverter {

  /// <summary>Holder for reflection information generated from token_converter_contract.proto</summary>
  internal static partial class TokenConverterContractReflection {

    #region Descriptor
    /// <summary>File descriptor for token_converter_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TokenConverterContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch50b2tlbl9jb252ZXJ0ZXJfY29udHJhY3QucHJvdG8SDlRva2VuQ29udmVy",
            "dGVyGhJhZWxmL29wdGlvbnMucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0",
            "eS5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGg9hZWxm",
            "L2NvcmUucHJvdG8aFGF1dGhvcml0eV9pbmZvLnByb3RvIrkBCglDb25uZWN0",
            "b3ISDgoGc3ltYm9sGAEgASgJEhcKD3ZpcnR1YWxfYmFsYW5jZRgCIAEoAxIO",
            "CgZ3ZWlnaHQYAyABKAkSIgoaaXNfdmlydHVhbF9iYWxhbmNlX2VuYWJsZWQY",
            "BCABKAgSGwoTaXNfcHVyY2hhc2VfZW5hYmxlZBgFIAEoCBIWCg5yZWxhdGVk",
            "X3N5bWJvbBgGIAEoCRIaChJpc19kZXBvc2l0X2FjY291bnQYByABKAgiHQoL",
            "VG9rZW5TeW1ib2wSDgoGc3ltYm9sGAEgASgJIm0KD0luaXRpYWxpemVJbnB1",
            "dBIZChFiYXNlX3Rva2VuX3N5bWJvbBgBIAEoCRIQCghmZWVfcmF0ZRgCIAEo",
            "CRItCgpjb25uZWN0b3JzGAMgAygLMhkuVG9rZW5Db252ZXJ0ZXIuQ29ubmVj",
            "dG9yIj0KCEJ1eUlucHV0Eg4KBnN5bWJvbBgBIAEoCRIOCgZhbW91bnQYAiAB",
            "KAMSEQoJcGF5X2xpbWl0GAMgASgDIkIKCVNlbGxJbnB1dBIOCgZzeW1ib2wY",
            "ASABKAkSDgoGYW1vdW50GAIgASgDEhUKDXJlY2VpdmVfbGltaXQYAyABKAMi",
            "PgoUR2V0RXhjaGFuZ2VSYXRlSW5wdXQSEwoLZnJvbV9zeW1ib2wYASABKAkS",
            "EQoJdG9fc3ltYm9sGAIgASgJIqABChlTZWxsV2l0aElubGluZUFjdGlvbklu",
            "cHV0Eg4KBnN5bWJvbBgBIAEoCRIOCgZhbW91bnQYAiABKAMSFQoNcmVjZWl2",
            "ZV9saW1pdBgDIAEoAxInChBjb250cmFjdF9hZGRyZXNzGAQgASgLMg0uYWVs",
            "Zi5BZGRyZXNzEhMKC21ldGhvZF9uYW1lGAUgASgJEg4KBnBhcmFtcxgGIAEo",
            "DCJqCgtUb2tlbkJvdWdodBIVCgZzeW1ib2wYASABKAlCBYiP9QEBEhUKDWJv",
            "dWdodF9hbW91bnQYAiABKAMSEwoLYmFzZV9hbW91bnQYAyABKAMSEgoKZmVl",
            "X2Ftb3VudBgEIAEoAzoEoLsYASJmCglUb2tlblNvbGQSFQoGc3ltYm9sGAEg",
            "ASgJQgWIj/UBARITCgtzb2xkX2Ftb3VudBgCIAEoAxITCgtiYXNlX2Ftb3Vu",
            "dBgDIAEoAxISCgpmZWVfYW1vdW50GAQgASgDOgSguxgBIocBChJQYWlyQ29u",
            "bmVjdG9yUGFyYW0SIQoZcmVzb3VyY2VfY29ubmVjdG9yX3N5bWJvbBgBIAEo",
            "CRIXCg9yZXNvdXJjZV93ZWlnaHQYAiABKAkSHgoWbmF0aXZlX3ZpcnR1YWxf",
            "YmFsYW5jZRgDIAEoAxIVCg1uYXRpdmVfd2VpZ2h0GAQgASgJIk8KFlRvQmVD",
            "b25uZWN0ZWRUb2tlbkluZm8SFAoMdG9rZW5fc3ltYm9sGAEgASgJEh8KF2Ft",
            "b3VudF90b190b2tlbl9jb252ZXJ0GAIgASgDIkcKC0RlcG9zaXRJbmZvEhMK",
            "C25lZWRfYW1vdW50GAEgASgDEiMKG2Ftb3VudF9vdXRfb2ZfdG9rZW5fY29u",
            "dmVydBgCIAEoAyJ8Cg1QYWlyQ29ubmVjdG9yEjUKEnJlc291cmNlX2Nvbm5l",
            "Y3RvchgBIAEoCzIZLlRva2VuQ29udmVydGVyLkNvbm5lY3RvchI0ChFkZXBv",
            "c2l0X2Nvbm5lY3RvchgCIAEoCzIZLlRva2VuQ29udmVydGVyLkNvbm5lY3Rv",
            "cjL+CgoWVG9rZW5Db252ZXJ0ZXJDb250cmFjdBJHCgpJbml0aWFsaXplEh8u",
            "VG9rZW5Db252ZXJ0ZXIuSW5pdGlhbGl6ZUlucHV0GhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASQwoMU2V0Q29ubmVjdG9yEhkuVG9rZW5Db252ZXJ0ZXIu",
            "Q29ubmVjdG9yGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASOQoDQnV5Ehgu",
            "VG9rZW5Db252ZXJ0ZXIuQnV5SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiABI7CgRTZWxsEhkuVG9rZW5Db252ZXJ0ZXIuU2VsbElucHV0GhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5IgASRAoKU2V0RmVlUmF0ZRIcLmdvb2dsZS5w",
            "cm90b2J1Zi5TdHJpbmdWYWx1ZRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIA",
            "EkYKD1VwZGF0ZUNvbm5lY3RvchIZLlRva2VuQ29udmVydGVyLkNvbm5lY3Rv",
            "choWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAElAKEEFkZFBhaXJDb25uZWN0",
            "b3ISIi5Ub2tlbkNvbnZlcnRlci5QYWlyQ29ubmVjdG9yUGFyYW0aFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkiABJTCg9FbmFibGVDb25uZWN0b3ISJi5Ub2tl",
            "bkNvbnZlcnRlci5Ub0JlQ29ubmVjdGVkVG9rZW5JbmZvGhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASRQoZQ2hhbmdlQ29ubmVjdG9yQ29udHJvbGxlchIO",
            "LkF1dGhvcml0eUluZm8aFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJFChVH",
            "ZXRGZWVSZWNlaXZlckFkZHJlc3MSFi5nb29nbGUucHJvdG9idWYuRW1wdHka",
            "DS5hZWxmLkFkZHJlc3MiBYiJ9wEBElUKEEdldFBhaXJDb25uZWN0b3ISGy5U",
            "b2tlbkNvbnZlcnRlci5Ub2tlblN5bWJvbBodLlRva2VuQ29udmVydGVyLlBh",
            "aXJDb25uZWN0b3IiBYiJ9wEBEkkKCkdldEZlZVJhdGUSFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkaHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUiBYiJ",
            "9wEBElAKEkdldEJhc2VUb2tlblN5bWJvbBIWLmdvb2dsZS5wcm90b2J1Zi5F",
            "bXB0eRobLlRva2VuQ29udmVydGVyLlRva2VuU3ltYm9sIgWIifcBARJeChBH",
            "ZXROZWVkZWREZXBvc2l0EiYuVG9rZW5Db252ZXJ0ZXIuVG9CZUNvbm5lY3Rl",
            "ZFRva2VuSW5mbxobLlRva2VuQ29udmVydGVyLkRlcG9zaXRJbmZvIgWIifcB",
            "ARJeChpHZXREZXBvc2l0Q29ubmVjdG9yQmFsYW5jZRIcLmdvb2dsZS5wcm90",
            "b2J1Zi5TdHJpbmdWYWx1ZRobLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVl",
            "IgWIifcBARJQCh9HZXRDb250cm9sbGVyRm9yTWFuYWdlQ29ubmVjdG9yEhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5Gg4uQXV0aG9yaXR5SW5mbyIFiIn3AQES",
            "VQoSSXNTeW1ib2xBYmxlVG9TZWxsEhwuZ29vZ2xlLnByb3RvYnVmLlN0cmlu",
            "Z1ZhbHVlGhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZSIFiIn3AQEaPrLM",
            "9gE5QUVsZi5Db250cmFjdHMuVG9rZW5Db252ZXJ0ZXIuVG9rZW5Db252ZXJ0",
            "ZXJDb250cmFjdFN0YXRlQiCqAh1BRWxmLkNvbnRyYWN0cy5Ub2tlbkNvbnZl",
            "cnRlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::AElf.Types.CoreReflection.Descriptor, global::AuthorityInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.Connector), global::AElf.Contracts.TokenConverter.Connector.Parser, new[]{ "Symbol", "VirtualBalance", "Weight", "IsVirtualBalanceEnabled", "IsPurchaseEnabled", "RelatedSymbol", "IsDepositAccount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.TokenSymbol), global::AElf.Contracts.TokenConverter.TokenSymbol.Parser, new[]{ "Symbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.InitializeInput), global::AElf.Contracts.TokenConverter.InitializeInput.Parser, new[]{ "BaseTokenSymbol", "FeeRate", "Connectors" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.BuyInput), global::AElf.Contracts.TokenConverter.BuyInput.Parser, new[]{ "Symbol", "Amount", "PayLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.SellInput), global::AElf.Contracts.TokenConverter.SellInput.Parser, new[]{ "Symbol", "Amount", "ReceiveLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.GetExchangeRateInput), global::AElf.Contracts.TokenConverter.GetExchangeRateInput.Parser, new[]{ "FromSymbol", "ToSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.SellWithInlineActionInput), global::AElf.Contracts.TokenConverter.SellWithInlineActionInput.Parser, new[]{ "Symbol", "Amount", "ReceiveLimit", "ContractAddress", "MethodName", "Params" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.TokenBought), global::AElf.Contracts.TokenConverter.TokenBought.Parser, new[]{ "Symbol", "BoughtAmount", "BaseAmount", "FeeAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.TokenSold), global::AElf.Contracts.TokenConverter.TokenSold.Parser, new[]{ "Symbol", "SoldAmount", "BaseAmount", "FeeAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.PairConnectorParam), global::AElf.Contracts.TokenConverter.PairConnectorParam.Parser, new[]{ "ResourceConnectorSymbol", "ResourceWeight", "NativeVirtualBalance", "NativeWeight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.ToBeConnectedTokenInfo), global::AElf.Contracts.TokenConverter.ToBeConnectedTokenInfo.Parser, new[]{ "TokenSymbol", "AmountToTokenConvert" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.DepositInfo), global::AElf.Contracts.TokenConverter.DepositInfo.Parser, new[]{ "NeedAmount", "AmountOutOfTokenConvert" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.PairConnector), global::AElf.Contracts.TokenConverter.PairConnector.Parser, new[]{ "ResourceConnector", "DepositConnector" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class Connector : pb::IMessage<Connector> {
    private static readonly pb::MessageParser<Connector> _parser = new pb::MessageParser<Connector>(() => new Connector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Connector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connector(Connector other) : this() {
      symbol_ = other.symbol_;
      virtualBalance_ = other.virtualBalance_;
      weight_ = other.weight_;
      isVirtualBalanceEnabled_ = other.isVirtualBalanceEnabled_;
      isPurchaseEnabled_ = other.isPurchaseEnabled_;
      relatedSymbol_ = other.relatedSymbol_;
      isDepositAccount_ = other.isDepositAccount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connector Clone() {
      return new Connector(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "virtual_balance" field.</summary>
    public const int VirtualBalanceFieldNumber = 2;
    private long virtualBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VirtualBalance {
      get { return virtualBalance_; }
      set {
        virtualBalance_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private string weight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Weight {
      get { return weight_; }
      set {
        weight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_virtual_balance_enabled" field.</summary>
    public const int IsVirtualBalanceEnabledFieldNumber = 4;
    private bool isVirtualBalanceEnabled_;
    /// <summary>
    /// true if virtual balance is enabled, false if not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVirtualBalanceEnabled {
      get { return isVirtualBalanceEnabled_; }
      set {
        isVirtualBalanceEnabled_ = value;
      }
    }

    /// <summary>Field number for the "is_purchase_enabled" field.</summary>
    public const int IsPurchaseEnabledFieldNumber = 5;
    private bool isPurchaseEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPurchaseEnabled {
      get { return isPurchaseEnabled_; }
      set {
        isPurchaseEnabled_ = value;
      }
    }

    /// <summary>Field number for the "related_symbol" field.</summary>
    public const int RelatedSymbolFieldNumber = 6;
    private string relatedSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RelatedSymbol {
      get { return relatedSymbol_; }
      set {
        relatedSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_deposit_account" field.</summary>
    public const int IsDepositAccountFieldNumber = 7;
    private bool isDepositAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDepositAccount {
      get { return isDepositAccount_; }
      set {
        isDepositAccount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Connector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Connector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (VirtualBalance != other.VirtualBalance) return false;
      if (Weight != other.Weight) return false;
      if (IsVirtualBalanceEnabled != other.IsVirtualBalanceEnabled) return false;
      if (IsPurchaseEnabled != other.IsPurchaseEnabled) return false;
      if (RelatedSymbol != other.RelatedSymbol) return false;
      if (IsDepositAccount != other.IsDepositAccount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (VirtualBalance != 0L) hash ^= VirtualBalance.GetHashCode();
      if (Weight.Length != 0) hash ^= Weight.GetHashCode();
      if (IsVirtualBalanceEnabled != false) hash ^= IsVirtualBalanceEnabled.GetHashCode();
      if (IsPurchaseEnabled != false) hash ^= IsPurchaseEnabled.GetHashCode();
      if (RelatedSymbol.Length != 0) hash ^= RelatedSymbol.GetHashCode();
      if (IsDepositAccount != false) hash ^= IsDepositAccount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (VirtualBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(VirtualBalance);
      }
      if (Weight.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Weight);
      }
      if (IsVirtualBalanceEnabled != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsVirtualBalanceEnabled);
      }
      if (IsPurchaseEnabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPurchaseEnabled);
      }
      if (RelatedSymbol.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RelatedSymbol);
      }
      if (IsDepositAccount != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsDepositAccount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (VirtualBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VirtualBalance);
      }
      if (Weight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Weight);
      }
      if (IsVirtualBalanceEnabled != false) {
        size += 1 + 1;
      }
      if (IsPurchaseEnabled != false) {
        size += 1 + 1;
      }
      if (RelatedSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RelatedSymbol);
      }
      if (IsDepositAccount != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Connector other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.VirtualBalance != 0L) {
        VirtualBalance = other.VirtualBalance;
      }
      if (other.Weight.Length != 0) {
        Weight = other.Weight;
      }
      if (other.IsVirtualBalanceEnabled != false) {
        IsVirtualBalanceEnabled = other.IsVirtualBalanceEnabled;
      }
      if (other.IsPurchaseEnabled != false) {
        IsPurchaseEnabled = other.IsPurchaseEnabled;
      }
      if (other.RelatedSymbol.Length != 0) {
        RelatedSymbol = other.RelatedSymbol;
      }
      if (other.IsDepositAccount != false) {
        IsDepositAccount = other.IsDepositAccount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            VirtualBalance = input.ReadInt64();
            break;
          }
          case 26: {
            Weight = input.ReadString();
            break;
          }
          case 32: {
            IsVirtualBalanceEnabled = input.ReadBool();
            break;
          }
          case 40: {
            IsPurchaseEnabled = input.ReadBool();
            break;
          }
          case 50: {
            RelatedSymbol = input.ReadString();
            break;
          }
          case 56: {
            IsDepositAccount = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TokenSymbol : pb::IMessage<TokenSymbol> {
    private static readonly pb::MessageParser<TokenSymbol> _parser = new pb::MessageParser<TokenSymbol>(() => new TokenSymbol());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenSymbol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSymbol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSymbol(TokenSymbol other) : this() {
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSymbol Clone() {
      return new TokenSymbol(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenSymbol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenSymbol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenSymbol other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      baseTokenSymbol_ = other.baseTokenSymbol_;
      feeRate_ = other.feeRate_;
      connectors_ = other.connectors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "base_token_symbol" field.</summary>
    public const int BaseTokenSymbolFieldNumber = 1;
    private string baseTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseTokenSymbol {
      get { return baseTokenSymbol_; }
      set {
        baseTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fee_rate" field.</summary>
    public const int FeeRateFieldNumber = 2;
    private string feeRate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeeRate {
      get { return feeRate_; }
      set {
        feeRate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connectors" field.</summary>
    public const int ConnectorsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Contracts.TokenConverter.Connector> _repeated_connectors_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Contracts.TokenConverter.Connector.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.TokenConverter.Connector> connectors_ = new pbc::RepeatedField<global::AElf.Contracts.TokenConverter.Connector>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.TokenConverter.Connector> Connectors {
      get { return connectors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseTokenSymbol != other.BaseTokenSymbol) return false;
      if (FeeRate != other.FeeRate) return false;
      if(!connectors_.Equals(other.connectors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseTokenSymbol.Length != 0) hash ^= BaseTokenSymbol.GetHashCode();
      if (FeeRate.Length != 0) hash ^= FeeRate.GetHashCode();
      hash ^= connectors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseTokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseTokenSymbol);
      }
      if (FeeRate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FeeRate);
      }
      connectors_.WriteTo(output, _repeated_connectors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseTokenSymbol);
      }
      if (FeeRate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeeRate);
      }
      size += connectors_.CalculateSize(_repeated_connectors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.BaseTokenSymbol.Length != 0) {
        BaseTokenSymbol = other.BaseTokenSymbol;
      }
      if (other.FeeRate.Length != 0) {
        FeeRate = other.FeeRate;
      }
      connectors_.Add(other.connectors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BaseTokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            FeeRate = input.ReadString();
            break;
          }
          case 26: {
            connectors_.AddEntriesFrom(input, _repeated_connectors_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class BuyInput : pb::IMessage<BuyInput> {
    private static readonly pb::MessageParser<BuyInput> _parser = new pb::MessageParser<BuyInput>(() => new BuyInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyInput(BuyInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      payLimit_ = other.payLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyInput Clone() {
      return new BuyInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "pay_limit" field.</summary>
    public const int PayLimitFieldNumber = 3;
    private long payLimit_;
    /// <summary>
    /// No buy if paying more than this, 0 if no limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PayLimit {
      get { return payLimit_; }
      set {
        payLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (PayLimit != other.PayLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (PayLimit != 0L) hash ^= PayLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (PayLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PayLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (PayLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PayLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.PayLimit != 0L) {
        PayLimit = other.PayLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            PayLimit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SellInput : pb::IMessage<SellInput> {
    private static readonly pb::MessageParser<SellInput> _parser = new pb::MessageParser<SellInput>(() => new SellInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellInput(SellInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      receiveLimit_ = other.receiveLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellInput Clone() {
      return new SellInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "receive_limit" field.</summary>
    public const int ReceiveLimitFieldNumber = 3;
    private long receiveLimit_;
    /// <summary>
    /// No sell if receiving less than this, 0 if no limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReceiveLimit {
      get { return receiveLimit_; }
      set {
        receiveLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (ReceiveLimit != other.ReceiveLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (ReceiveLimit != 0L) hash ^= ReceiveLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (ReceiveLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ReceiveLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (ReceiveLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiveLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.ReceiveLimit != 0L) {
        ReceiveLimit = other.ReceiveLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            ReceiveLimit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetExchangeRateInput : pb::IMessage<GetExchangeRateInput> {
    private static readonly pb::MessageParser<GetExchangeRateInput> _parser = new pb::MessageParser<GetExchangeRateInput>(() => new GetExchangeRateInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExchangeRateInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExchangeRateInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExchangeRateInput(GetExchangeRateInput other) : this() {
      fromSymbol_ = other.fromSymbol_;
      toSymbol_ = other.toSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExchangeRateInput Clone() {
      return new GetExchangeRateInput(this);
    }

    /// <summary>Field number for the "from_symbol" field.</summary>
    public const int FromSymbolFieldNumber = 1;
    private string fromSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromSymbol {
      get { return fromSymbol_; }
      set {
        fromSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_symbol" field.</summary>
    public const int ToSymbolFieldNumber = 2;
    private string toSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToSymbol {
      get { return toSymbol_; }
      set {
        toSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExchangeRateInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExchangeRateInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromSymbol != other.FromSymbol) return false;
      if (ToSymbol != other.ToSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromSymbol.Length != 0) hash ^= FromSymbol.GetHashCode();
      if (ToSymbol.Length != 0) hash ^= ToSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FromSymbol);
      }
      if (ToSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromSymbol);
      }
      if (ToSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExchangeRateInput other) {
      if (other == null) {
        return;
      }
      if (other.FromSymbol.Length != 0) {
        FromSymbol = other.FromSymbol;
      }
      if (other.ToSymbol.Length != 0) {
        ToSymbol = other.ToSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FromSymbol = input.ReadString();
            break;
          }
          case 18: {
            ToSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SellWithInlineActionInput : pb::IMessage<SellWithInlineActionInput> {
    private static readonly pb::MessageParser<SellWithInlineActionInput> _parser = new pb::MessageParser<SellWithInlineActionInput>(() => new SellWithInlineActionInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellWithInlineActionInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellWithInlineActionInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellWithInlineActionInput(SellWithInlineActionInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      receiveLimit_ = other.receiveLimit_;
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      methodName_ = other.methodName_;
      params_ = other.params_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellWithInlineActionInput Clone() {
      return new SellWithInlineActionInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "receive_limit" field.</summary>
    public const int ReceiveLimitFieldNumber = 3;
    private long receiveLimit_;
    /// <summary>
    /// No sell if receiving less than this, 0 if no limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReceiveLimit {
      get { return receiveLimit_; }
      set {
        receiveLimit_ = value;
      }
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 4;
    private global::AElf.Types.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "method_name" field.</summary>
    public const int MethodNameFieldNumber = 5;
    private string methodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 6;
    private pb::ByteString params_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Params {
      get { return params_; }
      set {
        params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellWithInlineActionInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellWithInlineActionInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (ReceiveLimit != other.ReceiveLimit) return false;
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (MethodName != other.MethodName) return false;
      if (Params != other.Params) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (ReceiveLimit != 0L) hash ^= ReceiveLimit.GetHashCode();
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (Params.Length != 0) hash ^= Params.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (ReceiveLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ReceiveLimit);
      }
      if (contractAddress_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ContractAddress);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MethodName);
      }
      if (Params.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Params);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (ReceiveLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiveLimit);
      }
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (Params.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Params);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellWithInlineActionInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.ReceiveLimit != 0L) {
        ReceiveLimit = other.ReceiveLimit;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      if (other.Params.Length != 0) {
        Params = other.Params;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            ReceiveLimit = input.ReadInt64();
            break;
          }
          case 34: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 42: {
            MethodName = input.ReadString();
            break;
          }
          case 50: {
            Params = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Events
  /// </summary>
  internal sealed partial class TokenBought : pb::IMessage<TokenBought> {
    private static readonly pb::MessageParser<TokenBought> _parser = new pb::MessageParser<TokenBought>(() => new TokenBought());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenBought> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenBought() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenBought(TokenBought other) : this() {
      symbol_ = other.symbol_;
      boughtAmount_ = other.boughtAmount_;
      baseAmount_ = other.baseAmount_;
      feeAmount_ = other.feeAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenBought Clone() {
      return new TokenBought(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bought_amount" field.</summary>
    public const int BoughtAmountFieldNumber = 2;
    private long boughtAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BoughtAmount {
      get { return boughtAmount_; }
      set {
        boughtAmount_ = value;
      }
    }

    /// <summary>Field number for the "base_amount" field.</summary>
    public const int BaseAmountFieldNumber = 3;
    private long baseAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseAmount {
      get { return baseAmount_; }
      set {
        baseAmount_ = value;
      }
    }

    /// <summary>Field number for the "fee_amount" field.</summary>
    public const int FeeAmountFieldNumber = 4;
    private long feeAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeAmount {
      get { return feeAmount_; }
      set {
        feeAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenBought);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenBought other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (BoughtAmount != other.BoughtAmount) return false;
      if (BaseAmount != other.BaseAmount) return false;
      if (FeeAmount != other.FeeAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (BoughtAmount != 0L) hash ^= BoughtAmount.GetHashCode();
      if (BaseAmount != 0L) hash ^= BaseAmount.GetHashCode();
      if (FeeAmount != 0L) hash ^= FeeAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (BoughtAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BoughtAmount);
      }
      if (BaseAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BaseAmount);
      }
      if (FeeAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FeeAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (BoughtAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BoughtAmount);
      }
      if (BaseAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseAmount);
      }
      if (FeeAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenBought other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.BoughtAmount != 0L) {
        BoughtAmount = other.BoughtAmount;
      }
      if (other.BaseAmount != 0L) {
        BaseAmount = other.BaseAmount;
      }
      if (other.FeeAmount != 0L) {
        FeeAmount = other.FeeAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            BoughtAmount = input.ReadInt64();
            break;
          }
          case 24: {
            BaseAmount = input.ReadInt64();
            break;
          }
          case 32: {
            FeeAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TokenSold : pb::IMessage<TokenSold> {
    private static readonly pb::MessageParser<TokenSold> _parser = new pb::MessageParser<TokenSold>(() => new TokenSold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenSold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSold(TokenSold other) : this() {
      symbol_ = other.symbol_;
      soldAmount_ = other.soldAmount_;
      baseAmount_ = other.baseAmount_;
      feeAmount_ = other.feeAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSold Clone() {
      return new TokenSold(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sold_amount" field.</summary>
    public const int SoldAmountFieldNumber = 2;
    private long soldAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoldAmount {
      get { return soldAmount_; }
      set {
        soldAmount_ = value;
      }
    }

    /// <summary>Field number for the "base_amount" field.</summary>
    public const int BaseAmountFieldNumber = 3;
    private long baseAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseAmount {
      get { return baseAmount_; }
      set {
        baseAmount_ = value;
      }
    }

    /// <summary>Field number for the "fee_amount" field.</summary>
    public const int FeeAmountFieldNumber = 4;
    private long feeAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeAmount {
      get { return feeAmount_; }
      set {
        feeAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenSold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenSold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (SoldAmount != other.SoldAmount) return false;
      if (BaseAmount != other.BaseAmount) return false;
      if (FeeAmount != other.FeeAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (SoldAmount != 0L) hash ^= SoldAmount.GetHashCode();
      if (BaseAmount != 0L) hash ^= BaseAmount.GetHashCode();
      if (FeeAmount != 0L) hash ^= FeeAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (SoldAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SoldAmount);
      }
      if (BaseAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BaseAmount);
      }
      if (FeeAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FeeAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (SoldAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SoldAmount);
      }
      if (BaseAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseAmount);
      }
      if (FeeAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenSold other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.SoldAmount != 0L) {
        SoldAmount = other.SoldAmount;
      }
      if (other.BaseAmount != 0L) {
        BaseAmount = other.BaseAmount;
      }
      if (other.FeeAmount != 0L) {
        FeeAmount = other.FeeAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            SoldAmount = input.ReadInt64();
            break;
          }
          case 24: {
            BaseAmount = input.ReadInt64();
            break;
          }
          case 32: {
            FeeAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class PairConnectorParam : pb::IMessage<PairConnectorParam> {
    private static readonly pb::MessageParser<PairConnectorParam> _parser = new pb::MessageParser<PairConnectorParam>(() => new PairConnectorParam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PairConnectorParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairConnectorParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairConnectorParam(PairConnectorParam other) : this() {
      resourceConnectorSymbol_ = other.resourceConnectorSymbol_;
      resourceWeight_ = other.resourceWeight_;
      nativeVirtualBalance_ = other.nativeVirtualBalance_;
      nativeWeight_ = other.nativeWeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairConnectorParam Clone() {
      return new PairConnectorParam(this);
    }

    /// <summary>Field number for the "resource_connector_symbol" field.</summary>
    public const int ResourceConnectorSymbolFieldNumber = 1;
    private string resourceConnectorSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceConnectorSymbol {
      get { return resourceConnectorSymbol_; }
      set {
        resourceConnectorSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_weight" field.</summary>
    public const int ResourceWeightFieldNumber = 2;
    private string resourceWeight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceWeight {
      get { return resourceWeight_; }
      set {
        resourceWeight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "native_virtual_balance" field.</summary>
    public const int NativeVirtualBalanceFieldNumber = 3;
    private long nativeVirtualBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NativeVirtualBalance {
      get { return nativeVirtualBalance_; }
      set {
        nativeVirtualBalance_ = value;
      }
    }

    /// <summary>Field number for the "native_weight" field.</summary>
    public const int NativeWeightFieldNumber = 4;
    private string nativeWeight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NativeWeight {
      get { return nativeWeight_; }
      set {
        nativeWeight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PairConnectorParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PairConnectorParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceConnectorSymbol != other.ResourceConnectorSymbol) return false;
      if (ResourceWeight != other.ResourceWeight) return false;
      if (NativeVirtualBalance != other.NativeVirtualBalance) return false;
      if (NativeWeight != other.NativeWeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourceConnectorSymbol.Length != 0) hash ^= ResourceConnectorSymbol.GetHashCode();
      if (ResourceWeight.Length != 0) hash ^= ResourceWeight.GetHashCode();
      if (NativeVirtualBalance != 0L) hash ^= NativeVirtualBalance.GetHashCode();
      if (NativeWeight.Length != 0) hash ^= NativeWeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceConnectorSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceConnectorSymbol);
      }
      if (ResourceWeight.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResourceWeight);
      }
      if (NativeVirtualBalance != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NativeVirtualBalance);
      }
      if (NativeWeight.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NativeWeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourceConnectorSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceConnectorSymbol);
      }
      if (ResourceWeight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceWeight);
      }
      if (NativeVirtualBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NativeVirtualBalance);
      }
      if (NativeWeight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NativeWeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PairConnectorParam other) {
      if (other == null) {
        return;
      }
      if (other.ResourceConnectorSymbol.Length != 0) {
        ResourceConnectorSymbol = other.ResourceConnectorSymbol;
      }
      if (other.ResourceWeight.Length != 0) {
        ResourceWeight = other.ResourceWeight;
      }
      if (other.NativeVirtualBalance != 0L) {
        NativeVirtualBalance = other.NativeVirtualBalance;
      }
      if (other.NativeWeight.Length != 0) {
        NativeWeight = other.NativeWeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourceConnectorSymbol = input.ReadString();
            break;
          }
          case 18: {
            ResourceWeight = input.ReadString();
            break;
          }
          case 24: {
            NativeVirtualBalance = input.ReadInt64();
            break;
          }
          case 34: {
            NativeWeight = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ToBeConnectedTokenInfo : pb::IMessage<ToBeConnectedTokenInfo> {
    private static readonly pb::MessageParser<ToBeConnectedTokenInfo> _parser = new pb::MessageParser<ToBeConnectedTokenInfo>(() => new ToBeConnectedTokenInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToBeConnectedTokenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToBeConnectedTokenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToBeConnectedTokenInfo(ToBeConnectedTokenInfo other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      amountToTokenConvert_ = other.amountToTokenConvert_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToBeConnectedTokenInfo Clone() {
      return new ToBeConnectedTokenInfo(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_to_token_convert" field.</summary>
    public const int AmountToTokenConvertFieldNumber = 2;
    private long amountToTokenConvert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountToTokenConvert {
      get { return amountToTokenConvert_; }
      set {
        amountToTokenConvert_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToBeConnectedTokenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToBeConnectedTokenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (AmountToTokenConvert != other.AmountToTokenConvert) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (AmountToTokenConvert != 0L) hash ^= AmountToTokenConvert.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (AmountToTokenConvert != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmountToTokenConvert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (AmountToTokenConvert != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountToTokenConvert);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToBeConnectedTokenInfo other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.AmountToTokenConvert != 0L) {
        AmountToTokenConvert = other.AmountToTokenConvert;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 16: {
            AmountToTokenConvert = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DepositInfo : pb::IMessage<DepositInfo> {
    private static readonly pb::MessageParser<DepositInfo> _parser = new pb::MessageParser<DepositInfo>(() => new DepositInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepositInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInfo(DepositInfo other) : this() {
      needAmount_ = other.needAmount_;
      amountOutOfTokenConvert_ = other.amountOutOfTokenConvert_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInfo Clone() {
      return new DepositInfo(this);
    }

    /// <summary>Field number for the "need_amount" field.</summary>
    public const int NeedAmountFieldNumber = 1;
    private long needAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NeedAmount {
      get { return needAmount_; }
      set {
        needAmount_ = value;
      }
    }

    /// <summary>Field number for the "amount_out_of_token_convert" field.</summary>
    public const int AmountOutOfTokenConvertFieldNumber = 2;
    private long amountOutOfTokenConvert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountOutOfTokenConvert {
      get { return amountOutOfTokenConvert_; }
      set {
        amountOutOfTokenConvert_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepositInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepositInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NeedAmount != other.NeedAmount) return false;
      if (AmountOutOfTokenConvert != other.AmountOutOfTokenConvert) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NeedAmount != 0L) hash ^= NeedAmount.GetHashCode();
      if (AmountOutOfTokenConvert != 0L) hash ^= AmountOutOfTokenConvert.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NeedAmount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NeedAmount);
      }
      if (AmountOutOfTokenConvert != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmountOutOfTokenConvert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NeedAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NeedAmount);
      }
      if (AmountOutOfTokenConvert != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountOutOfTokenConvert);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepositInfo other) {
      if (other == null) {
        return;
      }
      if (other.NeedAmount != 0L) {
        NeedAmount = other.NeedAmount;
      }
      if (other.AmountOutOfTokenConvert != 0L) {
        AmountOutOfTokenConvert = other.AmountOutOfTokenConvert;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NeedAmount = input.ReadInt64();
            break;
          }
          case 16: {
            AmountOutOfTokenConvert = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class PairConnector : pb::IMessage<PairConnector> {
    private static readonly pb::MessageParser<PairConnector> _parser = new pb::MessageParser<PairConnector>(() => new PairConnector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PairConnector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairConnector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairConnector(PairConnector other) : this() {
      resourceConnector_ = other.resourceConnector_ != null ? other.resourceConnector_.Clone() : null;
      depositConnector_ = other.depositConnector_ != null ? other.depositConnector_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairConnector Clone() {
      return new PairConnector(this);
    }

    /// <summary>Field number for the "resource_connector" field.</summary>
    public const int ResourceConnectorFieldNumber = 1;
    private global::AElf.Contracts.TokenConverter.Connector resourceConnector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.TokenConverter.Connector ResourceConnector {
      get { return resourceConnector_; }
      set {
        resourceConnector_ = value;
      }
    }

    /// <summary>Field number for the "deposit_connector" field.</summary>
    public const int DepositConnectorFieldNumber = 2;
    private global::AElf.Contracts.TokenConverter.Connector depositConnector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.TokenConverter.Connector DepositConnector {
      get { return depositConnector_; }
      set {
        depositConnector_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PairConnector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PairConnector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ResourceConnector, other.ResourceConnector)) return false;
      if (!object.Equals(DepositConnector, other.DepositConnector)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resourceConnector_ != null) hash ^= ResourceConnector.GetHashCode();
      if (depositConnector_ != null) hash ^= DepositConnector.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resourceConnector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ResourceConnector);
      }
      if (depositConnector_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DepositConnector);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resourceConnector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceConnector);
      }
      if (depositConnector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DepositConnector);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PairConnector other) {
      if (other == null) {
        return;
      }
      if (other.resourceConnector_ != null) {
        if (resourceConnector_ == null) {
          ResourceConnector = new global::AElf.Contracts.TokenConverter.Connector();
        }
        ResourceConnector.MergeFrom(other.ResourceConnector);
      }
      if (other.depositConnector_ != null) {
        if (depositConnector_ == null) {
          DepositConnector = new global::AElf.Contracts.TokenConverter.Connector();
        }
        DepositConnector.MergeFrom(other.DepositConnector);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (resourceConnector_ == null) {
              ResourceConnector = new global::AElf.Contracts.TokenConverter.Connector();
            }
            input.ReadMessage(ResourceConnector);
            break;
          }
          case 18: {
            if (depositConnector_ == null) {
              DepositConnector = new global::AElf.Contracts.TokenConverter.Connector();
            }
            input.ReadMessage(DepositConnector);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
